---
- name: Install eksnode
  copy:
    src: ../../target/release/eksnode
    dest: /usr/bin/eksnode
    owner: root
    group: root
    mode: 0755

- name: Install dnf packages
  ansible.builtin.dnf:
    name: '{{ item }}'
    state: present
  loop:
    - awscli
    - iptables-legacy # needed by kubelet
    - amazon-ssm-agent
    - amazon-ecr-credential-helper # to pull ECR images

# ec2-net-utils interferes with the route setup on the instance
- name: Remove the ec2-net-utils package
  ansible.builtin.dnf:
    name: ec2-net-utils
    state: absent

# - name: Hardening sshd
#   block:
#     - name: Editing sshd config
#       lineinfile:
#         dest: "/etc/ssh/sshd_config"
#         regexp: "{{ item.regexp | default(omit) }}"
#         line: "{{ item.line }}"
#         state: "{{ item.state | default('present') }}"
#         validate: "sshd -t -f %s"
#       with_items:
#         - line: "Protocol 2"
#         - line: "Protocol 1"
#           state: "absent"
#         - line: "RSAAuthentication yes"
#           state: "absent"
#         - regexp: "^Port\ "
#           line: "Port {{ ssh_port }}"
#         - regexp: "^PermitRootLogin\ "
#           line: "PermitRootLogin no"
#         - regexp: "^PasswordAuthentication\ "
#           line: "PasswordAuthentication no"
#         - regexp: "^PermitEmptyPasswords\ "
#           line: "PermitEmptyPasswords no"
#         - regexp: "^StrictModes\ "
#           line: "StrictModes yes"
#         - regexp: "^IgnoreRhosts\ "
#           line: "IgnoreRhosts yes"
#         - regexp: "^RhostsAuthentication\ "
#           line: "RhostsAuthentication no"
#         - regexp: "^RhostsRSAAuthentication\ "
#           line: "RhostsRSAAuthentication no"
#         - regexp: "^ClientAliveInterval\ "
#           line: "ClientAliveInterval 300"
#         - regexp: "^ClientAliveCountMax\ "
#           line: "ClientAliveCountMax 0"
#         - regexp: "^AllowTcpForwarding\ "
#           line: "AllowTcpForwarding no"
#         - regexp: "^X11Forwarding\ "
#           line: "X11Forwarding no"
#         - regexp: "^KexAlgorithms\ "
#           line: "KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256"
#         - regexp: "^Ciphers\ "
#           line: "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr"
#         - regexp: "^MACs\ "
#           line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com"

#     - name: Reload sshd
#       service:
#         name: sshd
#         state: reloaded

- name: Create logrotate.conf file
  copy:
    src: files/logrotate.conf
    dest: /etc/logrotate.conf
    owner: root
    group: root
    mode: 0644

- name: Create /etc/logrotate.d/kube-proxy file
  copy:
    src: files/logrotate-kube-proxy
    dest: /etc/logrotate.d/kube-proxy
    mode: 0644
    owner: root
    group: root

#########################################################
# Kubernetes directories
#########################################################

- name: Create /etc/eks/ directory
  ansible.builtin.file:
    path: /etc/eks
    state: directory
    owner: root
    group: root
  register: eks_dir

- name: Create /etc/kubernetes/manifests directory
  ansible.builtin.file:
    path: /etc/kubernetes/manifests
    state: directory
    owner: root
    group: root

- name: Create /var/lib/kubernetes directory
  ansible.builtin.file:
    path: /var/lib/kubernetes
    state: directory
    owner: root
    group: root

#########################################################
# RunC
#########################################################

- name: Install runc {{ runc_version }}
  ansible.builtin.get_url:
    url: '{{ runc_url }}'
    dest: /usr/local/sbin/runc
    checksum: '{{ runc_checksum }}'
    mode: 0755
    owner: root
    group: root

- name: Create runtime slice
  copy:
    src: files/runtime.slice
    dest: /etc/systemd/system/runtime.slice

#########################################################
# containerd
#########################################################

- name: Create /etc/containerd directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    owner: root
    group: root

# This separate task is used to validate checksum
- name: Download containerd {{ containerd_version }}
  ansible.builtin.get_url:
    url: '{{ containerd_url }}'
    dest: '/tmp/{{ containerd_archive }}'
    checksum: '{{ containerd_checksum }}'
  register: containerd_archive_dl

- name: Extract containerd
  ansible.builtin.unarchive:
    src: '{{ containerd_archive_dl.dest }}'
    dest: /usr/local/
    mode: 0755
    owner: root
    group: root
    remote_src: yes

# For amazon-ecr-credential-helper used by nerdctl to pull images
- name: Create /root/.docker directory
  ansible.builtin.file:
    path: /root/.docker
    state: directory
    owner: root
    group: root
  register: docker_dir

- name: Create {{ docker_dir.path }}/config.json
  copy:
    dest: '{{ docker_dir.path }}/config.json'
    mode: 0644
    owner: root
    group: root
    content: |
      {
        "credsStore": "ecr-login"
      }

- name: Install nerdctl {{ nerdctl_version }}
  ansible.builtin.unarchive:
    src: '{{ nerdctl_url }}'
    dest: /usr/local/bin
    mode: 0755
    owner: root
    group: root
    remote_src: yes

- name: Remove ctr - nerdctl is used instead
  ansible.builtin.file:
    path: /usr/local/bin/ctr
    state: absent

- name: Create {{ eks_dir.path }}/containerd
  ansible.builtin.file:
    path: '{{ eks_dir.path }}/containerd'
    state: directory
    owner: root
    group: root

- name: Create /etc/systemd/system/containerd.service.d directory
  ansible.builtin.file:
    path: /etc/systemd/system/containerd.service.d
    state: directory
    owner: root
    group: root

- name: Create /etc/modules-load.d/containerd.conf file
  copy:
    dest: /etc/modules-load.d/containerd.conf
    mode: 0644
    owner: root
    group: root
    content: |
      br_netfilter
      overlay

- name: Create /etc/sysctl.d/99-kubernetes-cri.conf file
  copy:
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    mode: 0644
    owner: root
    group: root
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: Create /etc/systemd/system/containerd.service
  copy:
    src: files/containerd.service
    dest: /etc/systemd/system/containerd.service
    mode: 0644
    owner: root
    group: root

#########################################################
# CNI
#########################################################

- name: Create /etc/cni/net.d directory
  ansible.builtin.file:
    path: /etc/cni/net.d
    state: directory
    owner: root
    group: root

- name: Create /opt/cni/bin
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    owner: root
    group: root
  register: cni_dir

# This separate task is used to validate checksum
- name: Download CNI {{ cni_plugin_version }}
  ansible.builtin.get_url:
    url: '{{ cni_plugin_url}}'
    dest: '/tmp/{{ cni_plugin_archive }}'
    checksum: '{{ cni_plugin_checksum }}'
  register: cni_archive

- name: Extract CNI {{ cni_plugin_version }}
  ansible.builtin.unarchive:
    src: '{{ cni_archive.dest }}'
    dest: '{{ cni_dir.path }}'
    mode: 0755
    owner: root
    group: root
    remote_src: yes
    keep_newer: yes

#########################################################
# IAM authenticator / ECR credential provider
#########################################################

- name: Download aws-iam-authenticator binary {{ kubernetes_version }}/{{ kubernetes_build_date }}
  ansible.builtin.get_url:
    url: 'https://{{ s3_binary_bucket}}.s3.amazonaws.com/{{ s3_binary_path }}/aws-iam-authenticator'
    dest: '/usr/bin/aws-iam-authenticator'
    checksum: 'sha256:https://{{ s3_binary_bucket}}.s3.amazonaws.com/{{ s3_binary_path }}/aws-iam-authenticator.sha256'
    owner: root
    group: root
    mode: 0755

- name: Create ECR credential provider directory
  ansible.builtin.file:
    path: '{{ eks_dir.path }}/image-credential-provider'
    state: directory
    owner: root
    group: root
  register: image_credential_provider_dir

- name: Download ecr-credential-provider binary {{ kubernetes_version }}/{{ kubernetes_build_date }}
  ansible.builtin.get_url:
    url: 'https://{{ s3_binary_bucket}}.s3.amazonaws.com/{{ s3_binary_path }}/ecr-credential-provider'
    dest: '{{ image_credential_provider_dir.path }}/ecr-credential-provider'
    checksum: 'sha256:https://{{ s3_binary_bucket}}.s3.amazonaws.com/{{ s3_binary_path }}/ecr-credential-provider.sha256'
    owner: root
    group: root
    mode: 0755

# TODO - create /etc/eks/release AMI build metadata file

#########################################################
# sysctl
#########################################################

- name: Create /etc/sysctl.d/99-amazon.conf
  copy:
    dest: /etc/sysctl.d/99-amazon.conf
    mode: 0644
    owner: root
    group: root
    content: |
      vm.overcommit_memory=1
      kernel.panic=10
      kernel.panic_on_oops=1

- name: Create /etc/sysctl.conf
  copy:
    src: files/sysctl.conf
    dest: /etc/sysctl.conf
    mode: 0644
    owner: root
    group: root

# TODO - create psuedo bootstrap.sh script for backwards compat

#########################################################
# Kubelet
#########################################################

- name: Download kubelet binary {{ kubernetes_version }}/{{ kubernetes_build_date }}
  ansible.builtin.get_url:
    url: 'https://{{ s3_binary_bucket}}.s3.amazonaws.com/{{ s3_binary_path }}/kubelet'
    dest: '/usr/bin/kubelet'
    checksum: 'sha256:https://{{ s3_binary_bucket}}.s3.amazonaws.com/{{ s3_binary_path }}/kubelet.sha256'
    owner: root
    group: root
    mode: 0755

- name: Create /var/lib/kubelet directory
  ansible.builtin.file:
    path: /var/lib/kubelet
    state: directory
    owner: root
    group: root

# Kubelet config will be saved here
# TODO - why not save to /var/lib/kubelet?
# kubelet kubeconfig is stored in /var/lib/kubelet

- name: Create /etc/kubernetes/kubelet directory
  ansible.builtin.file:
    path: /etc/kubernetes/kubelet
    state: directory
    owner: root
    group: root

- name: Create /etc/systemd/system/kubelet.service.d directory
  ansible.builtin.file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory
    owner: root
    group: root

- name: Create /etc/kubernetes/pki directory
  ansible.builtin.file:
    path: /etc/kubernetes/pki
    state: directory
    owner: root
    group: root

- name: Create /etc/systemd/system/kubelet.service
  copy:
    src: files/kubelet.service
    dest: /etc/systemd/system/kubelet.service
    mode: 0644
    owner: root
    group: root

#########################################################
# Start containerd
#########################################################

- name: Force systemd to reread configs
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable & enable containerd and ensure it is not masked
  ansible.builtin.systemd:
    name: containerd
    enabled: true
    masked: no
    state: started

- name: Pull pause image
  ansible.builtin.shell: |
    eksnode pull --image=602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/pause:3.9
