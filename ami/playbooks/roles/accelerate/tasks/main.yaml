---
- name: Install prerequisites
  when: install_nvidia|bool or install_efa|bool
  block:
    - name: Install dnf packages
      ansible.builtin.dnf:
        name: '{{ item }}'
        state: present
      loop:
        - gcc
        - kernel-devel

#########################################################
# Limit deeper C-states
# https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/processor_state_control.html#c-states
#########################################################

- name: Limit deeper C-stats
  when: install_efa|bool
  block:
    - name: Limit Intel processors deeper C-state
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="((?:(?!intel_idle.max_cstate=1).)*?)"$'
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 intel_idle.max_cstate=1"'
        backup: true
        backrefs: true

    - name: Limit AMD processors deeper C-state
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="((?:(?!processor.max_cstate=1).)*?)"$'
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 processor.max_cstate=1"'
        backup: true
        backrefs: true

    - name: Rebuild grub boot configuration
      ansible.builtin.shell: |
        grub2-mkconfig -o /boot/grub2/grub.cfg

#########################################################
# NVIDIA driver
#########################################################

- name: Install NVIDIA driver
  when: install_nvidia|bool
  block:
    - name: Install NVIDIA supporting packages
      ansible.builtin.dnf:
        name: '{{ item }}'
        state: present
      loop:
        - libXft.x86_64 # required for nvidia-settings

    - name: Download NVIDIA driver installer {{ nvidia_driver_version }}
      ansible.builtin.get_url:
        url: '{{ nvidia_driver_url }}'
        dest: '/tmp/{{ nvidia_driver_executable }}'
      register: nvidia_driver_installer

    - name: Run NVIDIA driver installer
      ansible.builtin.shell: |
        sh {{ nvidia_driver_installer.dest }} -a -s --ui=none

    - name: Pause for 180 seconds
      ansible.builtin.pause:
        seconds: 180

#########################################################
# NVIDIA container toolkit
#########################################################

# https://github.com/NVIDIA/libnvidia-container/issues/208#issuecomment-1596723034
- name: Install NVIDIA container toolkit
  when: install_nvidia|bool
  block:
    - name: Add nvidia-container-toolkit repo
      yum_repository:
        name: nvidia-container-toolkit
        description: NVIDIA container toolkit
        baseurl: https://nvidia.github.io/libnvidia-container/stable/rpm/$basearch
        repo_gpgcheck: true
        gpgcheck: false
        enabled: true
        gpgkey: https://nvidia.github.io/libnvidia-container/gpgkey
        sslverify: true
        sslcacert: /etc/pki/tls/certs/ca-bundle.crt

    - name: Add libnvidia-container repo
      yum_repository:
        name: libnvidia-container
        description: NVIDIA libnvidia-container
        baseurl: https://nvidia.github.io/libnvidia-container/stable/centos8/$basearch
        repo_gpgcheck: true
        gpgcheck: false
        enabled: true
        gpgkey: https://nvidia.github.io/libnvidia-container/gpgkey
        sslverify: true
        sslcacert: /etc/pki/tls/certs/ca-bundle.crt

    - name: Import nvidia-container-toolkit GPG key
      ansible.builtin.rpm_key:
        state: present
        key: https://nvidia.github.io/libnvidia-container/gpgkey

    - name: Install nvidia-container-toolkit
      ansible.builtin.dnf:
        name: nvidia-container-toolkit
        state: latest
        update_cache: true

#########################################################
# AWS EFA
#########################################################

- name: Install EFA
  when: install_efa|bool
  block:
    - name: Download EFA installer {{ efa_installer_version }}
      ansible.builtin.get_url:
        url: '{{ efa_installer_url }}'
        dest: '/tmp/{{ efa_installer_archive }}'
        checksum: '{{ efa_installer_checksum }}'
      register: efa_installer_archive

    - name: Extract EFA installer
      ansible.builtin.unarchive:
        src: '{{ efa_installer_archive.dest }}'
        dest: /tmp
        mode: 0755
        owner: root
        group: root
        remote_src: yes
      register: efa_installer

    - name: Run EFA installer
      ansible.builtin.shell:
        chdir: '{{ efa_installer.dest }}/aws-efa-installer'
        # We only need the kernel module and rdma-core
        # OpenMPI and libfabric (along with NCCL, etc.) should
        # be provided in the application container
        cmd: ./efa_installer.sh --enable-gdr --minimal --yes

    - name: Ensure ptrace protection is disabled
      ansible.posix.seboolean:
        name: deny_ptrace
        state: false
        persistent: true

#########################################################
# Clean-up
#########################################################

- name: Remove install prerequisites
  when: install_nvidia|bool or install_efa|bool
  block:
    - name: Remove dnf packages
      ansible.builtin.dnf:
        name: '{{ item }}'
        state: absent
        autoremove: true
      loop:
        - gcc
        - kernel-devel
        - libstdc++-devel
        - rpmdevtools
        - rdma-core-devel
        - cmake
